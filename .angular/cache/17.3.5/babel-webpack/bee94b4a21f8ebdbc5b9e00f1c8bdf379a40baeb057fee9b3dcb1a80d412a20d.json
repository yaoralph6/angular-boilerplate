{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { AlertType } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nfunction AlertComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 4);\n    i0.ɵɵlistener(\"click\", function AlertComponent_div_0_div_2_Template_a_click_1_listener() {\n      const alert_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.removeAlert(alert_r2));\n    });\n    i0.ɵɵtext(2, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"span\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.cssClasses(alert_r2));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"innerHTML\", alert_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AlertComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2);\n    i0.ɵɵtemplate(2, AlertComponent_div_0_div_2_Template, 4, 4, \"div\", 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.alerts);\n  }\n}\nexport let AlertComponent = /*#__PURE__*/(() => {\n  class AlertComponent {\n    constructor(router, alertService) {\n      this.router = router;\n      this.alertService = alertService;\n      this.id = 'default-alert';\n      this.fade = true;\n      this.alerts = [];\n    }\n    ngOnInit() {\n      // subscribe to new alert notifications\n      this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n        // clear alerts when an empty alert is received\n        if (!alert.message) {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n          // remove 'keepAfterRouteChange' flag on the rest\n          this.alerts.forEach(x => delete x.keepAfterRouteChange);\n          return;\n        }\n        // add alert to array\n        this.alerts.push(alert);\n        // auto close alert if required\n        if (alert.autoClose) {\n          setTimeout(() => this.removeAlert(alert), 3000);\n        }\n      });\n      // clear alerts on location change\n      this.routeSubscription = this.router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          this.alertService.clear(this.id);\n        }\n      });\n    }\n    ngOnDestroy() {\n      // unsubscribe to avoid memory leaks\n      this.alertSubscription.unsubscribe();\n      this.routeSubscription.unsubscribe();\n    }\n    removeAlert(alert) {\n      // check if already removed to prevent error on auto close\n      if (!this.alerts.includes(alert)) return;\n      if (this.fade) {\n        // fade out alert\n        alert.fade = true;\n        // remove alert after faded out\n        setTimeout(() => {\n          this.alerts = this.alerts.filter(x => x !== alert);\n        }, 250);\n      } else {\n        // remove alert\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }\n    }\n    cssClasses(alert) {\n      if (!alert) return;\n      const classes = ['alert', 'alert-dismissable'];\n      const alertTypeClass = {\n        [AlertType.Success]: 'alert alert-success',\n        [AlertType.Error]: 'alert alert-danger',\n        [AlertType.Info]: 'alert alert-info',\n        [AlertType.Warning]: 'alert alert-warning'\n      };\n      classes.push(alertTypeClass[alert.type]);\n      if (alert.fade) {\n        classes.push('fade');\n      }\n      return classes.join(' ');\n    }\n    static #_ = this.ɵfac = function AlertComponent_Factory(t) {\n      return new (t || AlertComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AlertService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AlertComponent,\n      selectors: [[\"alert\"]],\n      inputs: {\n        id: \"id\",\n        fade: \"fade\"\n      },\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"container\", 4, \"ngIf\"], [1, \"container\"], [1, \"m-3\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"close\", 3, \"click\"], [3, \"innerHTML\"]],\n      template: function AlertComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AlertComponent_div_0_Template, 3, 1, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.alerts.length);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return AlertComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}