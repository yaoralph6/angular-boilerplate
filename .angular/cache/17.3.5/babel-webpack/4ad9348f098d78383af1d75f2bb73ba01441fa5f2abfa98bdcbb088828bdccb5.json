{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Alert, AlertType } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor() {\n      this.subject = new Subject();\n      this.defaultId = 'default-alert';\n    }\n    // enable subscribing to alerts observable\n    onAlert(id = this.defaultId) {\n      return this.subject.asObservable().pipe(filter(x => x && x.id === id));\n    }\n    // convenience methods\n    success(message, options) {\n      this.alert(new Alert({\n        ...options,\n        type: AlertType.Success,\n        message\n      }));\n    }\n    error(message, options) {\n      this.alert(new Alert({\n        ...options,\n        type: AlertType.Error,\n        message\n      }));\n    }\n    info(message, options) {\n      this.alert(new Alert({\n        ...options,\n        type: AlertType.Info,\n        message\n      }));\n    }\n    warn(message, options) {\n      this.alert(new Alert({\n        ...options,\n        type: AlertType.Warning,\n        message\n      }));\n    }\n    // core alert method\n    alert(alert) {\n      alert.id = alert.id || this.defaultId;\n      alert.autoClose = alert.autoClose === undefined ? true : alert.autoClose;\n      this.subject.next(alert);\n    }\n    // clear alerts\n    clear(id = this.defaultId) {\n      this.subject.next(new Alert({\n        id\n      }));\n    }\n    static #_ = this.ɵfac = function AlertService_Factory(t) {\n      return new (t || AlertService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AlertService,\n      factory: AlertService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AlertService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}